void test()
{

    // std::string x = "helloworld";
    // cout << sha256(x) << endl;


    // static unsigned char buffer[65];
    // sha256("string", buffer);
    // printf("%s\n", buffer);



    // string hex= "6e43cb52644d22830c903105725594311ce46e573a4a5b6d7644ad3e33000000";
    // string ascii = unhexlify(hex);
    // // if (unhexlify(hex, hex+len, ascii) < 0) return 1; // error
    // std::cout << hex << " -> " << ascii << std::endl;
    // cout<<"length = "<<ascii.size()<<endl;
    // string hex2 = hexlify(ascii);
    // cout<< hex2<<endl;
    // cout << hex2.size()<<endl;

    string target11 = "00a0000000000000000000000000000000000000000000000000000000000000";
    Dodecahedron::Bigint result = string2Bigint(target11);
    cout<<result<<endl;

    unsigned char * header = unhexlify("000000204158dd93ec3879f930d22319562c0eeb009ddadbe1f6097f93ee348615000000d2bba8e5fd830642289c36016be591d1a1244932c1d470a3d4f7bc782613cf3b5e480900000000000000000000000000000000000000000000000000000000003a2bec5a6320631ddb09308200011e4b04000000000000000000000000000000000000000000001e",140 * 2);
    unsigned char * exp_solution = unhexlify("fd400510383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af10383bfebd33d969680af",1347 * 2);
    Dodecahedron::Bigint target = Dodecahedron::Bigint("282695530364541492733327600118866962532397423500099033299456992206819164160");

    // cout<<is_valid(header,exp_solution,target)<<endl;






    string res0 = "{\"id\":1,\"result\":[null,\"663f0ae000011fee\"],\"error\":null}";
    string res1 = "{\"id\":null,\"method\":\"mining.set_target\",\"params\":[\"00a0000000000000000000000000000000000000000000000000000000000000\"]}";
    string res2 = "{\"id\":null,\"method\":\"mining.notify\",\"params\":[\"42087\",\"00000020\",\"6e43cb52644d22830c903105725594311ce46e573a4a5b6d7644ad3e33000000\",\"b821ef195a73fa6b4502b40cbbacd9179e8391665045797629f33c3a830bcdad\",\"c444090000000000000000000000000000000000000000000000000000000000\",\"2182ea5a\",\"d869621d\",true,false]}";
    string res3 = "{\"id\":2,\"result\":true,\"error\":null}";

    string res4 = "{\"id\":16,\"result\":true,\"error\":null}";

    Json::Reader reader;
    Json::Value root;

    // if(reader.parse(res0,root))
    // {
    //     int id = root["id"].asInt();
    //     cout<<"id = "<<id<<endl;
    //     const Json::Value arrayObj = root["result"];
    //     string nonce1 = arrayObj[1];
    //     // for (unsigned int i = 0; i < arrayObj.size(); i++)
    //     // {
    //     //     cout<<arrayObj[i].asString()<<endl;
    //     // }
    //     string error = root["error"].asString();
    //     cout<<"error = "<<error<<endl;

    //     // cout << praenomen + " " + nomen + " " + cognomen
    //     //   << " was born in year " << born 
    //     //   << ", died in year " << died << endl;
    // }


    // if(reader.parse(res3,root))
    // {
    //     int id = root["id"].asInt();
    //     cout<<"id = "<<id<<endl;
    //     bool result = root["result"].asBool();
    //     cout<<result<<endl;
    //     string error = root["error"].asString();
    //     cout<<"error = "<<error<<endl;

    //     // cout << praenomen + " " + nomen + " " + cognomen
    //     //   << " was born in year " << born 
    //     //   << ", died in year " << died << endl;
    // }

    // cout<<res1<<endl;
    // if(reader.parse(res1,root))
    // {
    //     int id = root["id"].asInt();
    //     cout<<"id = "<<id<<endl;
    //     string method = root["method"].asString();
    //     cout<<"method = "<<method<<endl;

    //     const Json::Value arrayObj = root["params"];
    //     string target = arrayObj[0].asString();
    //     cout<<"target = "<<target<<endl;
    // }


    // cout<<res2<<endl;
    // if(reader.parse(res2,root))
    // {
    //     string method = root["method"].asString();
    //     cout<<"method = "<<method<<endl;
    //     int id = root["id"].asInt();
    //     cout<<"id = "<<id<<endl;

    //     const Json::Value arrayObj = root["params"];
    //     string job_id = arrayObj[0].asString();
    //     string version = arrayObj[1].asString();
    //     string prev_hash = arrayObj[2].asString();
    //     string merkle_root = arrayObj[3].asString();
    //     string reserved = arrayObj[4].asString();
    //     string ntime = arrayObj[5].asString();
    //     string nbits = arrayObj[6].asString();
    //     bool clean_job = arrayObj[7].asBool();

    //     cout<<"job_id = "<<job_id<<endl;
    //     cout<<"version = "<<version<<endl;
    //     cout<<"prev_hash = "<<prev_hash<<endl;
    //     cout<<"merkle_root = "<<merkle_root<<endl;
    //     cout<<"reserved = "<<reserved<<endl;
    //     cout<<"ntime = "<<ntime<<endl;
    //     cout<<"nbits = "<<nbits<<endl;
    //     cout<<"clean_job = "<<clean_job<<endl;
    // }


    //     //字符串
    // const char* str = 
    //   "{\"praenomen\":\"Gaius\",\"nomen\":\"Julius\",\"cognomen\":\"Caezar\","
    //   "\"born\":-100,\"died\":-44}";




    // //从字符串中读取数据
    // if(reader.parse(str,root))
    // {
    //   string praenomen = root["praenomen"].asString();
    //   string nomen = root["nomen"].asString();
    //   string cognomen = root["cognomen"].asString();
    //   int born = root["born"].asInt();
    //   int died = root["died"].asInt();

    //   cout << praenomen + " " + nomen + " " + cognomen
    //       << " was born in year " << born 
    //       << ", died in year " << died << endl;
    // }

}
